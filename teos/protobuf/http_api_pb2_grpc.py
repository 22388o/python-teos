# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import teos.protobuf.appointment_pb2 as appointment__pb2
import teos.protobuf.user_pb2 as user__pb2


class HTTP_APIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
            "/teos.protobuf.protos.HTTP_API/register",
            request_serializer=user__pb2.RegisterRequest.SerializeToString,
            response_deserializer=user__pb2.RegisterResponse.FromString,
        )
        self.add_appointment = channel.unary_unary(
            "/teos.protobuf.protos.HTTP_API/add_appointment",
            request_serializer=appointment__pb2.AddAppointmentRequest.SerializeToString,
            response_deserializer=appointment__pb2.AddAppointmentResponse.FromString,
        )
        self.get_appointment = channel.unary_unary(
            "/teos.protobuf.protos.HTTP_API/get_appointment",
            request_serializer=appointment__pb2.GetAppointmentRequest.SerializeToString,
            response_deserializer=appointment__pb2.GetAppointmentResponse.FromString,
        )


class HTTP_APIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def add_appointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_appointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_HTTP_APIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "register": grpc.unary_unary_rpc_method_handler(
            servicer.register,
            request_deserializer=user__pb2.RegisterRequest.FromString,
            response_serializer=user__pb2.RegisterResponse.SerializeToString,
        ),
        "add_appointment": grpc.unary_unary_rpc_method_handler(
            servicer.add_appointment,
            request_deserializer=appointment__pb2.AddAppointmentRequest.FromString,
            response_serializer=appointment__pb2.AddAppointmentResponse.SerializeToString,
        ),
        "get_appointment": grpc.unary_unary_rpc_method_handler(
            servicer.get_appointment,
            request_deserializer=appointment__pb2.GetAppointmentRequest.FromString,
            response_serializer=appointment__pb2.GetAppointmentResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("teos.protobuf.protos.HTTP_API", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class HTTP_API(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/teos.protobuf.protos.HTTP_API/register",
            user__pb2.RegisterRequest.SerializeToString,
            user__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def add_appointment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/teos.protobuf.protos.HTTP_API/add_appointment",
            appointment__pb2.AddAppointmentRequest.SerializeToString,
            appointment__pb2.AddAppointmentResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def get_appointment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/teos.protobuf.protos.HTTP_API/get_appointment",
            appointment__pb2.GetAppointmentRequest.SerializeToString,
            appointment__pb2.GetAppointmentResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
