# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "pisa/requirements.txt" }}-{{ checksum "pisa/requirements-dev.txt" }}-{{ checksum "apps/cli/requirements-dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            pyenv local 3.7.0
            python3 -m venv venv
            . venv/bin/activate
            sudo pip install --upgrade pip
            pip install -r pisa/requirements.txt
            pip install -r pisa/requirements-dev.txt
            pip install -r apps/cli/requirements-dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "pisa/requirements.txt" }}-{{ checksum "pisa/requirements-dev.txt" }}-{{ checksum "apps/cli/requirements-dev.txt" }}

      # Build docker env for E2E testing
      - run:
          name: build bitcoin_sandbox
          command: |
            git clone --single-branch --branch ln https://github.com/sr-gi/bitcoin_sandbox.git
            . venv/bin/activate
            pip install -r bitcoin_sandbox/requirements.txt
            cp test/pisa/e2e/bitcoin.conf bitcoin_sandbox/
            cp test/pisa/e2e/conf.py bitcoin_sandbox/bitcoin_sandbox/
            mv bitcoin_sandbox/bitcoin_sandbox venv/lib/python3.7/site-packages
            python venv/lib/python3.7/site-packages/bitcoin_sandbox/run_scenarios.py


      # Run unit tests
      - run:
          name: create config
          command: cp pisa/sample_conf.py pisa/conf.py

      - run:
          name: run pisa unit tests
          command: |
            . venv/bin/activate
            pytest test/pisa/unit/

      - run:
          name: run common unit tests
          command: |
            . venv/bin/activate
            pytest test/common/unit

      - run:
          name: run cli unit tests
          command: |
            . venv/bin/activate
            pytest test/apps/cli/unit

      # - store_artifacts:
      #    path: test-reports
      #    destination: test-reports
