version: 2

jobs:
  tests:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-20.0-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "contrib/client/requirements.txt" }}}

      - run:
          name: Install dependencies
          command: |
            pyenv local 3.7.0
            python3 -m venv venv
            . venv/bin/activate
            sudo pip install --upgrade pip
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
            pip install -r contrib/client/requirements.txt

      - run:
          name: Install bitcoind (0.20.0)
          command: |
            if [ ! -d "bitcoin" ]; then
              wget https://bitcoin.org/bin/bitcoin-core-0.20.0/bitcoin-0.20.0-x86_64-linux-gnu.tar.gz
              tar -xzf bitcoin-0.20.0-x86_64-linux-gnu.tar.gz
              mv bitcoin-0.20.0 bitcoin
            fi

      - save_cache:
          paths:
            - ./venv
            - bitcoin
          key: v1-dependencies-20.0-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "contrib/client/requirements.txt" }}}

      - run:
          name: Setup teos
          command: |
            mkdir ~/.teos/
            cp test/teos/e2e/teos.conf ~/.teos/

      - run:
          name: Run contrib unit tests
          command: |
            . venv/bin/activate
            pytest contrib/test

      - run:
          name: Run common unit tests
          command: |
            . venv/bin/activate
            pytest test/common/unit

      - run:
          name: Run teos unit tests
          command: |
            . venv/bin/activate
            BITCOIND=/home/circleci/project/bitcoin/bin/bitcoind pytest test/teos/unit/

      - run:
          name: Run e2e tests
          command: |
            . venv/bin/activate
            BITCOIND=/home/circleci/project/bitcoin/bin/bitcoind pytest test/teos/e2e/

  # Update Docker image
  # publish jobs require $DOCKERHUB_REPO, $DOCKERHUB_USER, $DOCKERHUB_PASS defined
  publish_docker_linuxamd64:
    machine:
      docker_layer_caching: false

    steps:
      - checkout
      - run:
          name: docker linux amd64
          command: |
            LATEST_TAG=${CIRCLE_TAG:1} #trim v from tag
            if [ -z "$LATEST_TAG" ]
            then
                  LATEST_TAG="latest"
            fi
            #
            sudo docker build --pull -t $DOCKERHUB_REPO:$LATEST_TAG-amd64 -f docker/Dockerfile .
            sudo docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS
            sudo docker push $DOCKERHUB_REPO:$LATEST_TAG-amd64
  publish_docker_linuxarm32:
    machine:
      docker_layer_caching: false

    steps:
      - checkout
      - run:
          name: docker linux arm32
          no_output_timeout: 20m
          command: |
            sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
            LATEST_TAG=${CIRCLE_TAG:1} #trim v from tag
            if [ -z "$LATEST_TAG" ]
            then
                  LATEST_TAG="latest"
            fi
            #
            sudo docker build --pull -t $DOCKERHUB_REPO:$LATEST_TAG-arm32v7 -f docker/arm32v7.Dockerfile .
            sudo docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS
            sudo docker push $DOCKERHUB_REPO:$LATEST_TAG-arm32v7
  publish_docker_linuxarm64:
    machine:
      docker_layer_caching: false

    steps:
      - checkout
      - run:
          name: docker linux arm64
          no_output_timeout: 20m
          command: |
            sudo docker run --rm --privileged multiarch/qemu-user-static:register --reset
            LATEST_TAG=${CIRCLE_TAG:1} #trim v from tag
            if [ -z "$LATEST_TAG" ]
            then
                  LATEST_TAG="latest"
            fi
            #
            sudo docker build --pull -t $DOCKERHUB_REPO:$LATEST_TAG-arm64v8 -f docker/arm64v8.Dockerfile .
            sudo docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS
            sudo docker push $DOCKERHUB_REPO:$LATEST_TAG-arm64v8
  publish_docker_multiarch:
    machine:
      enabled: true
      image: circleci/classic:201808-01

    steps:
      - run:
          name: docker linux multiarch
          no_output_timeout: 20m
          command: |
            # Turn on Experimental features
            sudo mkdir $HOME/.docker
            sudo sh -c 'echo "{ \"experimental\": \"enabled\" }" >> $HOME/.docker/config.json'
            #
            sudo docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS
            #
            LATEST_TAG=${CIRCLE_TAG:1} #trim v from tag
            if [ -z "$LATEST_TAG" ]
            then
                  LATEST_TAG="latest"
            fi
            sudo docker manifest create --amend $DOCKERHUB_REPO:$LATEST_TAG $DOCKERHUB_REPO:$LATEST_TAG-amd64 $DOCKERHUB_REPO:$LATEST_TAG-arm32v7 $DOCKERHUB_REPO:$LATEST_TAG-arm64v8
            sudo docker manifest annotate $DOCKERHUB_REPO:$LATEST_TAG $DOCKERHUB_REPO:$LATEST_TAG-amd64 --os linux --arch amd64
            sudo docker manifest annotate $DOCKERHUB_REPO:$LATEST_TAG $DOCKERHUB_REPO:$LATEST_TAG-arm32v7 --os linux --arch arm --variant v7
            sudo docker manifest annotate $DOCKERHUB_REPO:$LATEST_TAG $DOCKERHUB_REPO:$LATEST_TAG-arm64v8 --os linux --arch arm64 --variant v8
            sudo docker manifest push $DOCKERHUB_REPO:$LATEST_TAG -p

workflows:
  version: 2

  run_tests:
    jobs:
      - tests

  publish:
    jobs:
      - publish_docker_linuxamd64:
          filters:
            # ignore any commit on any branch by default
            branches:
              only: master
            # only act on version tags
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish_docker_linuxarm32:
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish_docker_linuxarm64:
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish_docker_multiarch:
          requires:
            - publish_docker_linuxamd64
            - publish_docker_linuxarm32
            - publish_docker_linuxarm64
          filters:
            branches:
              only: master
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
